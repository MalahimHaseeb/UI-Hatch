{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "smart-dropdown",
  "type": "registry:ui",
  "title": "Smart Dropdown",
  "description": "A flexible dropdown that works with any trigger (div, button, box) and supports default or custom action handlers.",
  "files": [
    {
      "path": "./components/smart-dropdown.tsx",
      "content": "\"use client\"\nimport * as React from \"react\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { cn } from \"@/lib/utils\"\n\ninterface MenuItem {\n  label: string\n  action: () => void\n  icon?: React.ReactNode\n  className?: string\n}\n\ninterface TriggerElementProps {\n  onClick?: (e: React.MouseEvent) => void\n  className?: string\n  children?: React.ReactNode\n  // Add other known props your trigger elements might use\n  variant?: string\n  size?: string\n  disabled?: boolean\n}\n\ninterface MenuDropdownProps {\n  triggerElement: React.ReactElement<TriggerElementProps>\n  menuItems?: MenuItem[]\n  includeDeviceUpload?: boolean\n  fileInputId?: string\n  className?: string\n  align?: \"start\" | \"center\" | \"end\"\n}\n\nconst MenuDropdown = React.forwardRef<HTMLDivElement, MenuDropdownProps>(\n  (\n    {\n      triggerElement,\n      menuItems = [],\n      includeDeviceUpload = true,\n      fileInputId = \"fileInput\",\n      className,\n      align = \"end\",\n      ...props\n    },\n    ref\n  ) => {\n    const defaultItems: MenuItem[] = [\n      includeDeviceUpload && {\n        label: \"Upload from device\",\n        action: () => document.getElementById(fileInputId)?.click(),\n      },\n    ].filter(Boolean) as MenuItem[]\n\n    const allMenuItems = [...defaultItems, ...menuItems]\n\n    const trigger = React.cloneElement(triggerElement, {\n      onClick: (e: React.MouseEvent) => {\n        e.preventDefault()\n        e.stopPropagation()\n        triggerElement.props.onClick?.(e)\n      },\n      className: cn(\n        \"cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        triggerElement.props.className\n      ),\n    })\n\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          {trigger}\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          align={align}\n          className={cn(\"min-w-[200px] bg-background\", className)}\n          {...props}\n          ref={ref}\n        >\n          {allMenuItems.map((item, index) => (\n            <DropdownMenuItem\n              key={index}\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                item.action()\n              }}\n              className={cn(\n                \"cursor-pointer focus:bg-accent focus:text-accent-foreground\",\n                item.className\n              )}\n            >\n              {item.icon && (\n                <span className=\"mr-2 h-4 w-4\">{item.icon}</span>\n              )}\n              {item.label}\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  }\n)\n\nMenuDropdown.displayName = \"MenuDropdown\"\n\nexport { MenuDropdown }",
      "type": "registry:ui",
      "target": "components/ui/hatch/smart-dropdown.tsx"
    }
  ]
}